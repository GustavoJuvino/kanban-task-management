// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username String
  email String @unique
  hashedPassword String
  boards Board[]
}

model Board {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userID String @db.ObjectId
  boardName String @unique
  currentBoard String?

  user User @relation(fields: [userID], references: [id], onDelete: Cascade)
  columns Column[]
}

model Column {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  boardID String @db.ObjectId
  columnName String
  updateColumnName String
  itemID String
  color String
  fromBoard String  

  board Board @relation(fields: [boardID], references: [id], onDelete: Cascade)
  tasks Task[]
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  columnID String @db.ObjectId
  itemID String
  taskItemID String
  title String 
  status String?
  fromBoard String
  fromColumn String
  updateTitle String
  description String
  updateColumn String

  column Column @relation(fields: [columnID], references: [id], onDelete: Cascade)
  subtasks Subtask[]
}

model Subtask {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  taskID String @db.ObjectId 
  subtaskID String
  name String
  fromTask String
  fromBoard String
  fromColumn String
  completed Boolean

  task Task @relation(fields: [taskID], references: [id], onDelete: Cascade)
}